
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSARROW ASSIGN BOOL COLON COMMA DEF ELSE FLOAT16 ID IF INT LBRACE LPAREN MINUS PLUS RBRACE RETURN RPAREN SEMICOLON\n    code : declarations functions\n    \n    declarations : declarations declaration\n                | empty\n    \n    declaration : ID COLON ID ASSIGN expression SEMICOLON\n    \n    expression : ID\n               | literal\n               | expression PLUS expression\n               | expression MINUS expression\n               | LPAREN expression RPAREN\n    \n    literal : FLOAT16\n            | INT\n            | BOOL\n    \n    functions : functions function\n              | empty\n    \n    function : DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE\n    \n    args : args_list\n         | empty\n    \n    args_list : args_list COMMA arg\n              | arg\n    \n    arg : ID COLON ID\n    \n    statements : statements statement\n               | empty\n    \n    statement : IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE\n              | RETURN expression SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'ID':([0,2,3,5,9,10,13,14,23,27,29,30,31,32,35,48,49,],[-25,7,-3,-2,11,12,15,20,20,34,15,-4,20,20,40,20,20,]),'DEF':([0,2,3,4,5,6,8,30,45,],[-25,-25,-3,9,-2,-14,-13,-4,-15,]),'$end':([0,1,2,3,4,5,6,8,30,45,],[-25,0,-25,-3,-1,-2,-14,-13,-4,-15,]),'COLON':([7,15,40,53,58,],[10,27,41,54,59,]),'LPAREN':([11,14,23,31,32,47,48,49,],[13,23,23,23,23,49,23,23,]),'ASSIGN':([12,],[14,]),'RPAREN':([13,16,17,18,19,20,22,24,25,26,33,34,36,37,38,39,51,],[-25,28,-16,-17,-19,-5,-6,-10,-11,-12,39,-20,-18,-7,-8,-9,53,]),'FLOAT16':([14,23,31,32,48,49,],[24,24,24,24,24,24,]),'INT':([14,23,31,32,48,49,],[25,25,25,25,25,25,]),'BOOL':([14,23,31,32,48,49,],[26,26,26,26,26,26,]),'COMMA':([17,19,34,36,],[29,-19,-20,-18,]),'SEMICOLON':([20,21,22,24,25,26,37,38,39,50,],[-5,30,-6,-10,-11,-12,-7,-8,-9,52,]),'PLUS':([20,21,22,24,25,26,33,37,38,39,50,51,],[-5,31,-6,-10,-11,-12,31,-7,-8,-9,31,31,]),'MINUS':([20,21,22,24,25,26,33,37,38,39,50,51,],[-5,32,-6,-10,-11,-12,32,-7,-8,-9,32,32,]),'ARROW':([28,],[35,]),'LBRACE':([41,54,59,],[42,55,60,]),'RBRACE':([42,43,44,46,52,55,56,60,61,62,],[-25,45,-22,-21,-24,-25,57,-25,62,-23,]),'IF':([42,43,44,46,52,55,56,60,61,62,],[-25,47,-22,-21,-24,-25,47,-25,47,-23,]),'RETURN':([42,43,44,46,52,55,56,60,61,62,],[-25,48,-22,-21,-24,-25,48,-25,48,-23,]),'ELSE':([57,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'declarations':([0,],[2,]),'empty':([0,2,13,42,55,60,],[3,6,18,44,44,44,]),'functions':([2,],[4,]),'declaration':([2,],[5,]),'function':([4,],[8,]),'args':([13,],[16,]),'args_list':([13,],[17,]),'arg':([13,29,],[19,36,]),'expression':([14,23,31,32,48,49,],[21,33,37,38,50,51,]),'literal':([14,23,31,32,48,49,],[22,22,22,22,22,22,]),'statements':([42,55,60,],[43,56,61,]),'statement':([43,56,61,],[46,46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> declarations functions','code',2,'p_code','compiler2.py',91),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','compiler2.py',96),
  ('declarations -> empty','declarations',1,'p_declarations','compiler2.py',97),
  ('declaration -> ID COLON ID ASSIGN expression SEMICOLON','declaration',6,'p_declaration','compiler2.py',102),
  ('expression -> ID','expression',1,'p_expression','compiler2.py',111),
  ('expression -> literal','expression',1,'p_expression','compiler2.py',112),
  ('expression -> expression PLUS expression','expression',3,'p_expression','compiler2.py',113),
  ('expression -> expression MINUS expression','expression',3,'p_expression','compiler2.py',114),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','compiler2.py',115),
  ('literal -> FLOAT16','literal',1,'p_literal','compiler2.py',120),
  ('literal -> INT','literal',1,'p_literal','compiler2.py',121),
  ('literal -> BOOL','literal',1,'p_literal','compiler2.py',122),
  ('functions -> functions function','functions',2,'p_functions','compiler2.py',127),
  ('functions -> empty','functions',1,'p_functions','compiler2.py',128),
  ('function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE','function',11,'p_function','compiler2.py',133),
  ('args -> args_list','args',1,'p_args','compiler2.py',138),
  ('args -> empty','args',1,'p_args','compiler2.py',139),
  ('args_list -> args_list COMMA arg','args_list',3,'p_args_list','compiler2.py',144),
  ('args_list -> arg','args_list',1,'p_args_list','compiler2.py',145),
  ('arg -> ID COLON ID','arg',3,'p_arg','compiler2.py',150),
  ('statements -> statements statement','statements',2,'p_statements','compiler2.py',155),
  ('statements -> empty','statements',1,'p_statements','compiler2.py',156),
  ('statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE','statement',13,'p_statement','compiler2.py',161),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement','compiler2.py',162),
  ('empty -> <empty>','empty',0,'p_empty','compiler2.py',167),
]
