Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> declarations functions
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> empty
Rule 4     declaration -> ID COLON ID ASSIGN expression SEMICOLON
Rule 5     expression -> ID
Rule 6     expression -> literal
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> expression MINUS expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    literal -> FLOAT16
Rule 11    literal -> INT
Rule 12    literal -> BOOL
Rule 13    functions -> functions function
Rule 14    functions -> empty
Rule 15    function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE
Rule 16    args -> args_list
Rule 17    args -> empty
Rule 18    args_list -> args_list COMMA arg
Rule 19    args_list -> arg
Rule 20    arg -> ID COLON ID
Rule 21    statements -> statements statement
Rule 22    statements -> empty
Rule 23    statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
Rule 24    statement -> RETURN expression SEMICOLON
Rule 25    empty -> <empty>
Rule 26    statement -> PRINT LPAREN STRING RPAREN SEMICOLON
Rule 27    statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON

Terminals, with rules where they appear

ARROW                : 15
ASSIGN               : 4
BOOL                 : 12
COLON                : 4 15 20 23 23
COMMA                : 18 27 27
DEF                  : 15
ELSE                 : 23
FLOAT16              : 10
ID                   : 4 4 5 15 15 20 20
IF                   : 23
INT                  : 11
LBRACE               : 15 23 23
LPAREN               : 9 15 23 26 27
MINUS                : 8
PLUS                 : 7
PRINT                : 26 27
RBRACE               : 15 23 23
RETURN               : 24
RPAREN               : 9 15 23 26 27
SEMICOLON            : 4 24 26 27
STRING               : 26 27
error                : 

Nonterminals, with rules where they appear

arg                  : 18 19
args                 : 15
args_list            : 16 18
code                 : 0
declaration          : 2
declarations         : 1 2
empty                : 3 14 17 22
expression           : 4 7 7 8 8 9 23 24 27 27
function             : 13
functions            : 1 13
literal              : 6
statement            : 21
statements           : 15 21 23 23

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . declarations functions
    (2) declarations -> . declarations declaration
    (3) declarations -> . empty
    (25) empty -> .

    ID              reduce using rule 25 (empty -> .)
    DEF             reduce using rule 25 (empty -> .)
    $end            reduce using rule 25 (empty -> .)

    code                           shift and go to state 1
    declarations                   shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> code .



state 2

    (1) code -> declarations . functions
    (2) declarations -> declarations . declaration
    (13) functions -> . functions function
    (14) functions -> . empty
    (4) declaration -> . ID COLON ID ASSIGN expression SEMICOLON
    (25) empty -> .

    ID              shift and go to state 7
    DEF             reduce using rule 25 (empty -> .)
    $end            reduce using rule 25 (empty -> .)

    functions                      shift and go to state 4
    declaration                    shift and go to state 5
    empty                          shift and go to state 6

state 3

    (3) declarations -> empty .

    ID              reduce using rule 3 (declarations -> empty .)
    DEF             reduce using rule 3 (declarations -> empty .)
    $end            reduce using rule 3 (declarations -> empty .)


state 4

    (1) code -> declarations functions .
    (13) functions -> functions . function
    (15) function -> . DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE

    $end            reduce using rule 1 (code -> declarations functions .)
    DEF             shift and go to state 9

    function                       shift and go to state 8

state 5

    (2) declarations -> declarations declaration .

    ID              reduce using rule 2 (declarations -> declarations declaration .)
    DEF             reduce using rule 2 (declarations -> declarations declaration .)
    $end            reduce using rule 2 (declarations -> declarations declaration .)


state 6

    (14) functions -> empty .

    DEF             reduce using rule 14 (functions -> empty .)
    $end            reduce using rule 14 (functions -> empty .)


state 7

    (4) declaration -> ID . COLON ID ASSIGN expression SEMICOLON

    COLON           shift and go to state 10


state 8

    (13) functions -> functions function .

    DEF             reduce using rule 13 (functions -> functions function .)
    $end            reduce using rule 13 (functions -> functions function .)


state 9

    (15) function -> DEF . ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE

    ID              shift and go to state 11


state 10

    (4) declaration -> ID COLON . ID ASSIGN expression SEMICOLON

    ID              shift and go to state 12


state 11

    (15) function -> DEF ID . LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE

    LPAREN          shift and go to state 13


state 12

    (4) declaration -> ID COLON ID . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 14


state 13

    (15) function -> DEF ID LPAREN . args RPAREN ARROW ID COLON LBRACE statements RBRACE
    (16) args -> . args_list
    (17) args -> . empty
    (18) args_list -> . args_list COMMA arg
    (19) args_list -> . arg
    (25) empty -> .
    (20) arg -> . ID COLON ID

    RPAREN          reduce using rule 25 (empty -> .)
    ID              shift and go to state 15

    args                           shift and go to state 16
    args_list                      shift and go to state 17
    empty                          shift and go to state 18
    arg                            shift and go to state 19

state 14

    (4) declaration -> ID COLON ID ASSIGN . expression SEMICOLON
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 21
    literal                        shift and go to state 22

state 15

    (20) arg -> ID . COLON ID

    COLON           shift and go to state 27


state 16

    (15) function -> DEF ID LPAREN args . RPAREN ARROW ID COLON LBRACE statements RBRACE

    RPAREN          shift and go to state 28


state 17

    (16) args -> args_list .
    (18) args_list -> args_list . COMMA arg

    RPAREN          reduce using rule 16 (args -> args_list .)
    COMMA           shift and go to state 29


state 18

    (17) args -> empty .

    RPAREN          reduce using rule 17 (args -> empty .)


state 19

    (19) args_list -> arg .

    COMMA           reduce using rule 19 (args_list -> arg .)
    RPAREN          reduce using rule 19 (args_list -> arg .)


state 20

    (5) expression -> ID .

    SEMICOLON       reduce using rule 5 (expression -> ID .)
    PLUS            reduce using rule 5 (expression -> ID .)
    MINUS           reduce using rule 5 (expression -> ID .)
    RPAREN          reduce using rule 5 (expression -> ID .)
    COMMA           reduce using rule 5 (expression -> ID .)


state 21

    (4) declaration -> ID COLON ID ASSIGN expression . SEMICOLON
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    SEMICOLON       shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 22

    (6) expression -> literal .

    SEMICOLON       reduce using rule 6 (expression -> literal .)
    PLUS            reduce using rule 6 (expression -> literal .)
    MINUS           reduce using rule 6 (expression -> literal .)
    RPAREN          reduce using rule 6 (expression -> literal .)
    COMMA           reduce using rule 6 (expression -> literal .)


state 23

    (9) expression -> LPAREN . expression RPAREN
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 33
    literal                        shift and go to state 22

state 24

    (10) literal -> FLOAT16 .

    SEMICOLON       reduce using rule 10 (literal -> FLOAT16 .)
    PLUS            reduce using rule 10 (literal -> FLOAT16 .)
    MINUS           reduce using rule 10 (literal -> FLOAT16 .)
    RPAREN          reduce using rule 10 (literal -> FLOAT16 .)
    COMMA           reduce using rule 10 (literal -> FLOAT16 .)


state 25

    (11) literal -> INT .

    SEMICOLON       reduce using rule 11 (literal -> INT .)
    PLUS            reduce using rule 11 (literal -> INT .)
    MINUS           reduce using rule 11 (literal -> INT .)
    RPAREN          reduce using rule 11 (literal -> INT .)
    COMMA           reduce using rule 11 (literal -> INT .)


state 26

    (12) literal -> BOOL .

    SEMICOLON       reduce using rule 12 (literal -> BOOL .)
    PLUS            reduce using rule 12 (literal -> BOOL .)
    MINUS           reduce using rule 12 (literal -> BOOL .)
    RPAREN          reduce using rule 12 (literal -> BOOL .)
    COMMA           reduce using rule 12 (literal -> BOOL .)


state 27

    (20) arg -> ID COLON . ID

    ID              shift and go to state 34


state 28

    (15) function -> DEF ID LPAREN args RPAREN . ARROW ID COLON LBRACE statements RBRACE

    ARROW           shift and go to state 35


state 29

    (18) args_list -> args_list COMMA . arg
    (20) arg -> . ID COLON ID

    ID              shift and go to state 15

    arg                            shift and go to state 36

state 30

    (4) declaration -> ID COLON ID ASSIGN expression SEMICOLON .

    ID              reduce using rule 4 (declaration -> ID COLON ID ASSIGN expression SEMICOLON .)
    DEF             reduce using rule 4 (declaration -> ID COLON ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 4 (declaration -> ID COLON ID ASSIGN expression SEMICOLON .)


state 31

    (7) expression -> expression PLUS . expression
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 37
    literal                        shift and go to state 22

state 32

    (8) expression -> expression MINUS . expression
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 38
    literal                        shift and go to state 22

state 33

    (9) expression -> LPAREN expression . RPAREN
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    RPAREN          shift and go to state 39
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 34

    (20) arg -> ID COLON ID .

    COMMA           reduce using rule 20 (arg -> ID COLON ID .)
    RPAREN          reduce using rule 20 (arg -> ID COLON ID .)


state 35

    (15) function -> DEF ID LPAREN args RPAREN ARROW . ID COLON LBRACE statements RBRACE

    ID              shift and go to state 40


state 36

    (18) args_list -> args_list COMMA arg .

    COMMA           reduce using rule 18 (args_list -> args_list COMMA arg .)
    RPAREN          reduce using rule 18 (args_list -> args_list COMMA arg .)


state 37

    (7) expression -> expression PLUS expression .
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 7 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 7 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 7 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]


state 38

    (8) expression -> expression MINUS expression .
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 8 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 8 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 8 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 8 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]


state 39

    (9) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 9 (expression -> LPAREN expression RPAREN .)


state 40

    (15) function -> DEF ID LPAREN args RPAREN ARROW ID . COLON LBRACE statements RBRACE

    COLON           shift and go to state 41


state 41

    (15) function -> DEF ID LPAREN args RPAREN ARROW ID COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 42


state 42

    (15) function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . empty
    (25) empty -> .

    RBRACE          reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    RETURN          reduce using rule 25 (empty -> .)
    PRINT           reduce using rule 25 (empty -> .)

    statements                     shift and go to state 43
    empty                          shift and go to state 44

state 43

    (15) function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
    (24) statement -> . RETURN expression SEMICOLON
    (26) statement -> . PRINT LPAREN STRING RPAREN SEMICOLON
    (27) statement -> . PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON

    RBRACE          shift and go to state 45
    IF              shift and go to state 47
    RETURN          shift and go to state 48
    PRINT           shift and go to state 49

    statement                      shift and go to state 46

state 44

    (22) statements -> empty .

    RBRACE          reduce using rule 22 (statements -> empty .)
    IF              reduce using rule 22 (statements -> empty .)
    RETURN          reduce using rule 22 (statements -> empty .)
    PRINT           reduce using rule 22 (statements -> empty .)


state 45

    (15) function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE .

    DEF             reduce using rule 15 (function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE .)
    $end            reduce using rule 15 (function -> DEF ID LPAREN args RPAREN ARROW ID COLON LBRACE statements RBRACE .)


state 46

    (21) statements -> statements statement .

    RBRACE          reduce using rule 21 (statements -> statements statement .)
    IF              reduce using rule 21 (statements -> statements statement .)
    RETURN          reduce using rule 21 (statements -> statements statement .)
    PRINT           reduce using rule 21 (statements -> statements statement .)


state 47

    (23) statement -> IF . LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE

    LPAREN          shift and go to state 50


state 48

    (24) statement -> RETURN . expression SEMICOLON
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 51
    literal                        shift and go to state 22

state 49

    (26) statement -> PRINT . LPAREN STRING RPAREN SEMICOLON
    (27) statement -> PRINT . LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 52


state 50

    (23) statement -> IF LPAREN . expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 53
    literal                        shift and go to state 22

state 51

    (24) statement -> RETURN expression . SEMICOLON
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    SEMICOLON       shift and go to state 54
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 52

    (26) statement -> PRINT LPAREN . STRING RPAREN SEMICOLON
    (27) statement -> PRINT LPAREN . STRING COMMA expression COMMA expression RPAREN SEMICOLON

    STRING          shift and go to state 55


state 53

    (23) statement -> IF LPAREN expression . RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    RPAREN          shift and go to state 56
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 54

    (24) statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 24 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 24 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 24 (statement -> RETURN expression SEMICOLON .)


state 55

    (26) statement -> PRINT LPAREN STRING . RPAREN SEMICOLON
    (27) statement -> PRINT LPAREN STRING . COMMA expression COMMA expression RPAREN SEMICOLON

    RPAREN          shift and go to state 57
    COMMA           shift and go to state 58


state 56

    (23) statement -> IF LPAREN expression RPAREN . COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE

    COLON           shift and go to state 59


state 57

    (26) statement -> PRINT LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 60


state 58

    (27) statement -> PRINT LPAREN STRING COMMA . expression COMMA expression RPAREN SEMICOLON
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 61
    literal                        shift and go to state 22

state 59

    (23) statement -> IF LPAREN expression RPAREN COLON . LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE

    LBRACE          shift and go to state 62


state 60

    (26) statement -> PRINT LPAREN STRING RPAREN SEMICOLON .

    RBRACE          reduce using rule 26 (statement -> PRINT LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 26 (statement -> PRINT LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 26 (statement -> PRINT LPAREN STRING RPAREN SEMICOLON .)
    PRINT           reduce using rule 26 (statement -> PRINT LPAREN STRING RPAREN SEMICOLON .)


state 61

    (27) statement -> PRINT LPAREN STRING COMMA expression . COMMA expression RPAREN SEMICOLON
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    COMMA           shift and go to state 63
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 62

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE . statements RBRACE ELSE COLON LBRACE statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . empty
    (25) empty -> .

    RBRACE          reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    RETURN          reduce using rule 25 (empty -> .)
    PRINT           reduce using rule 25 (empty -> .)

    statements                     shift and go to state 64
    empty                          shift and go to state 44

state 63

    (27) statement -> PRINT LPAREN STRING COMMA expression COMMA . expression RPAREN SEMICOLON
    (5) expression -> . ID
    (6) expression -> . literal
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . LPAREN expression RPAREN
    (10) literal -> . FLOAT16
    (11) literal -> . INT
    (12) literal -> . BOOL

    ID              shift and go to state 20
    LPAREN          shift and go to state 23
    FLOAT16         shift and go to state 24
    INT             shift and go to state 25
    BOOL            shift and go to state 26

    expression                     shift and go to state 65
    literal                        shift and go to state 22

state 64

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements . RBRACE ELSE COLON LBRACE statements RBRACE
    (21) statements -> statements . statement
    (23) statement -> . IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
    (24) statement -> . RETURN expression SEMICOLON
    (26) statement -> . PRINT LPAREN STRING RPAREN SEMICOLON
    (27) statement -> . PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON

    RBRACE          shift and go to state 66
    IF              shift and go to state 47
    RETURN          shift and go to state 48
    PRINT           shift and go to state 49

    statement                      shift and go to state 46

state 65

    (27) statement -> PRINT LPAREN STRING COMMA expression COMMA expression . RPAREN SEMICOLON
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression

    RPAREN          shift and go to state 67
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32


state 66

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE . ELSE COLON LBRACE statements RBRACE

    ELSE            shift and go to state 68


state 67

    (27) statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 69


state 68

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE . COLON LBRACE statements RBRACE

    COLON           shift and go to state 70


state 69

    (27) statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 27 (statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 27 (statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON .)


state 70

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 71


state 71

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . empty
    (25) empty -> .

    RBRACE          reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    RETURN          reduce using rule 25 (empty -> .)
    PRINT           reduce using rule 25 (empty -> .)

    statements                     shift and go to state 72
    empty                          shift and go to state 44

state 72

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE
    (24) statement -> . RETURN expression SEMICOLON
    (26) statement -> . PRINT LPAREN STRING RPAREN SEMICOLON
    (27) statement -> . PRINT LPAREN STRING COMMA expression COMMA expression RPAREN SEMICOLON

    RBRACE          shift and go to state 73
    IF              shift and go to state 47
    RETURN          shift and go to state 48
    PRINT           shift and go to state 49

    statement                      shift and go to state 46

state 73

    (23) statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE .

    RBRACE          reduce using rule 23 (statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE .)
    IF              reduce using rule 23 (statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE .)
    RETURN          reduce using rule 23 (statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE .)
    PRINT           reduce using rule 23 (statement -> IF LPAREN expression RPAREN COLON LBRACE statements RBRACE ELSE COLON LBRACE statements RBRACE .)

